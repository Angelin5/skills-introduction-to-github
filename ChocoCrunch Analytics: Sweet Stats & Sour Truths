{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMPDjNe/Hv6ID2v86eJIU3d",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Angelin5/skills-introduction-to-github/blob/main/ChocoCrunch%20Analytics%3A%20Sweet%20Stats%20%26%20Sour%20Truths\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "seo60d4cPOyF"
      },
      "outputs": [],
      "source": [
        "# --- Step 1: Kill old processes if any ---\n",
        "!pkill -f streamlit\n",
        "!pkill -f cloudflared\n",
        "\n",
        "# --- Step 2: Write the Streamlit app ---\n",
        "app_code = \"\"\"\n",
        "import streamlit as st\n",
        "import requests, time, json\n",
        "import pandas as pd\n",
        "from pandas import json_normalize\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import sqlite3\n",
        "\n",
        "st.set_page_config(page_title=\"üç´ ChocoCrunch Analytics\", layout=\"wide\")\n",
        "st.markdown(\"<h2 style='text-align:center; font-weight:bold;'>üç´ ChocoCrunch Analytics</h2>\", unsafe_allow_html=True)\n",
        "\n",
        "# --- Step 0: Choose action ---\n",
        "action = st.radio(\"Choose an action:\", [\"Collect & Clean Data\", \"Visualize Data\", \"Migrate to Sql\", \"Sql Queries\"])\n",
        "\n",
        "# --- Collect & Clean Data ---\n",
        "if action == \"Collect & Clean Data\":\n",
        "    if st.button(\"üöÄ Collect 12,000 Chocolate Records\"):\n",
        "        with st.spinner(\"Fetching data from OpenFoodFacts API (this may take a few minutes)...\"):\n",
        "            url = \"https://world.openfoodfacts.org/api/v2/search\"\n",
        "            all_products, size, total = [], 100, 12000\n",
        "            for p in range(1, total // size + 1):\n",
        "                r = requests.get(url, params={\n",
        "                    \"categories\": \"chocolates\",\n",
        "                    \"fields\": \"code,product_name,brands,nutriments\",\n",
        "                    \"page_size\": size, \"page\": p\n",
        "                }).json()\n",
        "                all_products += r.get(\"products\", [])\n",
        "                st.write(f\"Fetched page {p} ‚Üí {len(all_products)} items\")\n",
        "                time.sleep(1)\n",
        "\n",
        "            with open(\"chocolates.json\", \"w\") as f:\n",
        "                json.dump(all_products, f)\n",
        "\n",
        "            df = pd.DataFrame(all_products)\n",
        "            nutrient_cols = [\n",
        "                \"energy-kcal_value\",\"energy-kj_value\",\"carbohydrates_value\",\"sugars_value\",\n",
        "                \"fat_value\",\"saturated-fat_value\",\"proteins_value\",\"fiber_value\",\n",
        "                \"salt_value\",\"sodium_value\",\"nova-group\",\"nutrition-score-fr\",\n",
        "                \"fruits-vegetables-nuts-estimate-from-ingredients_100g\"\n",
        "            ]\n",
        "            df_nutrients = json_normalize(df[\"nutriments\"])[[c for c in nutrient_cols if c in json_normalize(df[\"nutriments\"]).columns]]\n",
        "            df_nutrients.columns = [\n",
        "                \"energy_kcal\",\"energy_kj\",\"carbohydrates\",\"sugars\",\n",
        "                \"fat\",\"saturated_fat\",\"proteins\",\"fiber\",\n",
        "                \"salt\",\"sodium\",\"nova_group\",\"nutrition_score\",\n",
        "                \"fruits_veg_nuts_estimate\"\n",
        "            ][:len(df_nutrients.columns)]\n",
        "\n",
        "            df_products = df[[\"product_name\",\"brands\",\"code\"]]\n",
        "            df_final = pd.concat([df_products, df_nutrients], axis=1)\n",
        "            df_cleaned = df_final.loc[:, df_final.isnull().mean() < 0.4]\n",
        "\n",
        "            df_explore = df_cleaned[\n",
        "                (df_cleaned[\"energy_kcal\"]<2000)&(df_cleaned[\"fat\"]<100)&\n",
        "                (df_cleaned[\"sugars\"]<100)&(df_cleaned[\"salt\"]<10)&(df_cleaned[\"fiber\"]<50)\n",
        "            ].copy()\n",
        "\n",
        "            df_explore[\"brands\"].replace(\"Unknown\", pd.NA, inplace=True)\n",
        "            df_explore[\"product_name\"].replace(\"Unknown\", pd.NA, inplace=True)\n",
        "            df_explore[\"sugar_to_carb_ratio\"] = (df_explore[\"sugars\"]/df_explore[\"carbohydrates\"]).replace([float(\"inf\"),-float(\"inf\")],0).fillna(0)\n",
        "\n",
        "            def calorie_category(kcal):\n",
        "                if kcal<150: return \"Low\"\n",
        "                elif kcal<400: return \"Moderate\"\n",
        "                else: return \"High\"\n",
        "            def sugar_category(sugar):\n",
        "                if sugar<5: return \"Low Sugar\"\n",
        "                elif sugar<20: return \"Moderate Sugar\"\n",
        "                else: return \"High Sugar\"\n",
        "\n",
        "            df_explore[\"calorie_category\"] = df_explore[\"energy_kcal\"].apply(calorie_category)\n",
        "            df_explore[\"sugar_category\"] = df_explore[\"sugars\"].apply(sugar_category)\n",
        "            df_explore[\"is_ultra_processed\"] = df_explore[\"nova_group\"].apply(lambda x: \"Yes\" if x==4 else \"No\")\n",
        "\n",
        "            st.session_state[\"choco_data\"] = df_explore\n",
        "            st.success(\"‚úÖ Data collection & cleaning complete!\")\n",
        "            st.dataframe(df_explore, height=800)\n",
        "\n",
        "# --- Visualization ---\n",
        "elif action == \"Visualize Data\":\n",
        "    if \"choco_data\" not in st.session_state:\n",
        "        st.warning(\"‚ö† Collect data first to enable visualizations.\")\n",
        "    else:\n",
        "        df_viz = st.session_state[\"choco_data\"]\n",
        "        viz_option = st.selectbox(\n",
        "            \"Choose a visualization:\",\n",
        "            [\n",
        "                \"Bar Chart: Calorie Category\",\"Bar Chart: Sugar Category\",\"Pie Chart: Nova Group\",\n",
        "                \"Histogram: Energy, Sugars, Sugar-to-Carb Ratio\",\"Box Plot: Calories or Sugars by Brands\",\n",
        "                \"Scatter Plot: Calories vs Sugars\",\"Heatmap: Nutrient Correlations\",\"Top N Brands by Avg Calories/Sugars\"\n",
        "            ]\n",
        "        )\n",
        "\n",
        "        # Smaller figure size\n",
        "        figsize_small = (6,4)\n",
        "        figsize_medium = (10,4)\n",
        "        figsize_large = (10,6)\n",
        "\n",
        "        # --- Ultra-compact helper ---\n",
        "        def tiny_fig():\n",
        "            plt.rcParams.update({\n",
        "               'font.size': 7,\n",
        "               'axes.titlesize': 7,\n",
        "               'axes.labelsize': 7,\n",
        "               'xtick.labelsize': 6,\n",
        "               'ytick.labelsize': 6,\n",
        "               'legend.fontsize': 7\n",
        "            })\n",
        "            return plt.subplots(figsize=(2.5,1.8))  # very small figure\n",
        "\n",
        "\n",
        "        if viz_option == \"Bar Chart: Calorie Category\":\n",
        "            fig, ax = tiny_fig()\n",
        "            df_viz[\"calorie_category\"].value_counts().plot(kind=\"bar\", ax=ax, color=\"chocolate\")\n",
        "            ax.set_ylabel(\"Products\", fontsize=5)\n",
        "            st.pyplot(fig, use_container_width=False)\n",
        "\n",
        "\n",
        "        elif viz_option == \"Bar Chart: Sugar Category\":\n",
        "            fig, ax = tiny_fig()\n",
        "            df_viz[\"sugar_category\"].value_counts().plot(kind=\"bar\", ax=ax, color=\"orange\")\n",
        "            ax.set_ylabel(\"Products\", fontsize=7)\n",
        "            st.pyplot(fig, use_container_width=False)\n",
        "\n",
        "\n",
        "        elif viz_option == \"Pie Chart: Nova Group\":\n",
        "            fig, ax = plt.subplots(figsize=(5, 4))\n",
        "            df_viz[\"nova_group\"].value_counts().plot(\n",
        "               kind=\"pie\",\n",
        "               autopct=\"%1.0f%%\",\n",
        "               ax=ax,\n",
        "               textprops={'fontsize':7}\n",
        "            )\n",
        "            ax.set_ylabel(\"\")  # remove default label\n",
        "            st.pyplot(fig, use_container_width=False)\n",
        "\n",
        "\n",
        "        elif viz_option == \"Histogram: Energy, Sugars, Sugar-to-Carb Ratio\":\n",
        "            fig, ax = plt.subplots(1,3, figsize=(12,3))  # compact\n",
        "            df_viz[\"energy_kcal\"].hist(ax=ax[0], color=\"chocolate\"); ax[0].set_title(\"Calories\")\n",
        "            df_viz[\"sugars\"].hist(ax=ax[1], color=\"orange\"); ax[1].set_title(\"Sugars\")\n",
        "            df_viz[\"sugar_to_carb_ratio\"].hist(ax=ax[2], color=\"green\"); ax[2].set_title(\"Sugar-to-Carb Ratio\")\n",
        "            st.pyplot(fig)\n",
        "\n",
        "        elif viz_option == \"Box Plot: Calories or Sugars by Brands\":\n",
        "            fig, ax = plt.subplots(1,2, figsize=(12,3))\n",
        "            sns.boxplot(x=\"brands\", y=\"energy_kcal\", data=df_viz, ax=ax[0])\n",
        "            ax[0].set_xticklabels(ax[0].get_xticklabels(), rotation=90)\n",
        "            ax[0].set_title(\"Calories by Brand\")\n",
        "            sns.boxplot(x=\"brands\", y=\"sugars\", data=df_viz, ax=ax[1])\n",
        "            ax[1].set_xticklabels(ax[1].get_xticklabels(), rotation=90)\n",
        "            ax[1].set_title(\"Sugars by Brand\")\n",
        "            st.pyplot(fig)\n",
        "\n",
        "        elif viz_option == \"Scatter Plot: Calories vs Sugars\":\n",
        "            fig, ax = tiny_fig()\n",
        "            ax.scatter(df_viz[\"energy_kcal\"], df_viz[\"sugars\"],\n",
        "                       alpha=0.5, color=\"purple\", s=6)  # tiny points\n",
        "            ax.set_xlabel(\"Calories\", fontsize=7)\n",
        "            ax.set_ylabel(\"Sugars\", fontsize=7)\n",
        "            ax.set_title(\"Calories vs Sugars\", fontsize=7)\n",
        "            st.pyplot(fig, use_container_width=False)\n",
        "\n",
        "\n",
        "        elif viz_option == \"Heatmap: Nutrient Correlations\":\n",
        "            fig, ax = plt.subplots(figsize=figsize_medium)\n",
        "            sns.heatmap(df_viz[[\"energy_kcal\",\"sugars\",\"fat\",\"saturated_fat\",\"proteins\",\"fiber\",\"salt\"]].corr(), annot=True, cmap=\"coolwarm\", ax=ax)\n",
        "            st.pyplot(fig)\n",
        "\n",
        "        elif viz_option == \"Top N Brands by Avg Calories/Sugars\":\n",
        "            top_n = st.slider(\"Select top N brands:\",5,20,10)\n",
        "            fig, ax = plt.subplots(1,2, figsize=(12,3))\n",
        "            df_avg = df_viz.groupby(\"brands\")[[\"energy_kcal\",\"sugars\"]].mean().sort_values(\"energy_kcal\", ascending=False)\n",
        "            df_avg.head(top_n)[\"energy_kcal\"].plot(kind=\"bar\", ax=ax[0], color=\"chocolate\"); ax[0].set_title(\"Top Brands by Avg Calories\")\n",
        "            df_avg.head(top_n)[\"sugars\"].plot(kind=\"bar\", ax=ax[1], color=\"orange\"); ax[1].set_title(\"Top Brands by Avg Sugars\")\n",
        "            st.pyplot(fig)\n",
        "\n",
        "# --- Migrate to SQL ---\n",
        "elif action == \"Migrate to Sql\":\n",
        "    if \"choco_data\" not in st.session_state:\n",
        "        st.warning(\"‚ö† Collect data first to migrate to SQL.\")\n",
        "    else:\n",
        "        df_explore = st.session_state[\"choco_data\"]\n",
        "        st.markdown(\"### Insert the collected data\")\n",
        "\n",
        "        if st.button(\"Insert\"):\n",
        "            conn = sqlite3.connect(\"chococrunch.db\")\n",
        "            cursor = conn.cursor()\n",
        "\n",
        "            # --- Table 1: product_info ---\n",
        "            cursor.execute(\\\"\\\"\\\"\n",
        "                CREATE TABLE IF NOT EXISTS product_info (\n",
        "                    product_code TEXT PRIMARY KEY,\n",
        "                    product_name TEXT,\n",
        "                    brand TEXT\n",
        "                )\n",
        "            \\\"\\\"\\\")\n",
        "            rows = df_explore[[\"code\", \"product_name\", \"brands\"]].rename(\n",
        "                columns={\"code\": \"product_code\", \"brands\": \"brand\"}\n",
        "            ).to_dict(orient=\"records\")\n",
        "            cursor.executemany(\\\"\\\"\\\"\n",
        "                INSERT OR REPLACE INTO product_info\n",
        "                (product_code, product_name, brand)\n",
        "                VALUES (:product_code, :product_name, :brand)\n",
        "            \\\"\\\"\\\", rows)\n",
        "            conn.commit()\n",
        "            cursor.execute(\"SELECT COUNT(*) FROM product_info\")\n",
        "\n",
        "\n",
        "            # --- Table 2: nutrient_info ---\n",
        "            if \"energy_kj\" not in df_explore.columns:\n",
        "                df_explore[\"energy_kj\"] = df_explore[\"energy_kcal\"] * 4.184\n",
        "\n",
        "            cursor.execute(\\\"\\\"\\\"\n",
        "                CREATE TABLE IF NOT EXISTS nutrient_info (\n",
        "                    product_code TEXT,\n",
        "                    energy_kcal FLOAT,\n",
        "                    energy_kj FLOAT,\n",
        "                    carbohydrates FLOAT,\n",
        "                    sugars FLOAT,\n",
        "                    fat FLOAT,\n",
        "                    saturated_fat FLOAT,\n",
        "                    proteins FLOAT,\n",
        "                    fiber FLOAT,\n",
        "                    salt FLOAT,\n",
        "                    sodium FLOAT,\n",
        "                    fruits_veg_nuts_estimate FLOAT,\n",
        "                    nutrition_score INTEGER,\n",
        "                    nova_group INTEGER,\n",
        "                    FOREIGN KEY (product_code) REFERENCES product_info(product_code)\n",
        "                )\n",
        "            \\\"\\\"\\\")\n",
        "            df_nutrients = df_explore.rename(columns={\"code\": \"product_code\"})[\n",
        "                [\"product_code\",\"energy_kcal\",\"energy_kj\",\"carbohydrates\",\"sugars\",\"fat\",\"saturated_fat\",\n",
        "                 \"proteins\",\"fiber\",\"salt\",\"sodium\",\"fruits_veg_nuts_estimate\",\"nutrition_score\",\"nova_group\"]\n",
        "            ]\n",
        "            rows = df_nutrients.to_dict(orient=\"records\")\n",
        "            cursor.executemany(\\\"\\\"\\\"\n",
        "                INSERT OR REPLACE INTO nutrient_info\n",
        "                (product_code, energy_kcal, energy_kj, carbohydrates, sugars, fat, saturated_fat,\n",
        "                 proteins, fiber, salt, sodium, fruits_veg_nuts_estimate, nutrition_score, nova_group)\n",
        "                VALUES (:product_code, :energy_kcal, :energy_kj, :carbohydrates, :sugars, :fat, :saturated_fat,\n",
        "                        :proteins, :fiber, :salt, :sodium, :fruits_veg_nuts_estimate, :nutrition_score, :nova_group)\n",
        "            \\\"\\\"\\\", rows)\n",
        "            conn.commit()\n",
        "            cursor.execute(\"SELECT COUNT(*) FROM nutrient_info\")\n",
        "\n",
        "\n",
        "            # --- Table 3: derived_metrics ---\n",
        "            cursor.execute(\\\"\\\"\\\"\n",
        "                CREATE TABLE IF NOT EXISTS derived_metrics (\n",
        "                    product_code TEXT,\n",
        "                    sugar_to_carb_ratio FLOAT,\n",
        "                    calorie_category TEXT,\n",
        "                    sugar_category TEXT,\n",
        "                    is_ultra_processed TEXT,\n",
        "                    FOREIGN KEY (product_code) REFERENCES product_info(product_code)\n",
        "                )\n",
        "            \\\"\\\"\\\")\n",
        "            df_metrics = df_explore.rename(columns={\"code\": \"product_code\"})[\n",
        "                [\"product_code\",\"sugar_to_carb_ratio\",\"calorie_category\",\"sugar_category\",\"is_ultra_processed\"]\n",
        "            ]\n",
        "            rows = df_metrics.to_dict(orient=\"records\")\n",
        "            cursor.executemany(\\\"\\\"\\\"\n",
        "                INSERT OR REPLACE INTO derived_metrics\n",
        "                (product_code, sugar_to_carb_ratio, calorie_category, sugar_category, is_ultra_processed)\n",
        "                VALUES (:product_code, :sugar_to_carb_ratio, :calorie_category, :sugar_category, :is_ultra_processed)\n",
        "            \\\"\\\"\\\", rows)\n",
        "            conn.commit()\n",
        "            cursor.execute(\"SELECT COUNT(*) FROM derived_metrics\")\n",
        "\n",
        "\n",
        "            # --- Optional: Show sample data from each table ---\n",
        "            st.subheader(\"üìëProduct_info \")\n",
        "            st.dataframe(pd.read_sql(\"SELECT * FROM product_info\", conn))\n",
        "            st.subheader(\"üìëNutrient_info\")\n",
        "            st.dataframe(pd.read_sql(\"SELECT * FROM nutrient_info\", conn))\n",
        "            st.subheader(\"üìëDerived_metrics\")\n",
        "            st.dataframe(pd.read_sql(\"SELECT * FROM derived_metrics\", conn))\n",
        "\n",
        "            conn.close()\n",
        "\n",
        "            # --- SQL Queries Section ---\n",
        "elif action == \"Sql Queries\":\n",
        "    conn = sqlite3.connect(\"chococrunch.db\")\n",
        "    st.markdown(\"### SQL Queries\")\n",
        "\n",
        "    tab1, tab2, tab3, tab4 = st.tabs([\"product_info\", \"nutrient_info\", \"derived_metrics\", \"Join Queries\"])\n",
        "\n",
        "    # --- Tab 1: product_info ---\n",
        "    with tab1:\n",
        "        queries_pi = {\n",
        "            \"1.Count products per brand\": \\\"\"\"\n",
        "             SELECT brand, COUNT(*) AS count FROM product_info GROUP BY brand ORDER BY count DESC\n",
        "             \\\"\"\",\n",
        "            \"2.Count unique products per brand\": \\\"\"\"\n",
        "             SELECT brand, COUNT(DISTINCT product_name) AS unique_products FROM product_info GROUP BY brand ORDER BY unique_products DESC\n",
        "             \\\"\"\",\n",
        "            \"3.Top 5 brands by product count\": \\\"\"\"\n",
        "             SELECT brand, COUNT(*) AS count FROM product_info GROUP BY brand ORDER BY count DESC LIMIT 5\n",
        "             \\\"\"\",\n",
        "            \"4.Products with missing product name\": \\\"\"\"\n",
        "             SELECT * FROM product_info WHERE product_name IS NULL\n",
        "             \\\"\"\",\n",
        "            \"5.Number of unique brands\": \\\"\"\"\n",
        "             SELECT COUNT(DISTINCT brand) FROM product_info\n",
        "             \\\"\"\",\n",
        "            \"6.Products with code starting with '3'\": \\\"\"\"\n",
        "             SELECT * FROM product_info WHERE product_code LIKE '3%'\n",
        "             \\\"\"\"\n",
        "        }\n",
        "\n",
        "        selected_query = st.selectbox(\"Select query:\", list(queries_pi.keys()))\n",
        "        if selected_query:\n",
        "            sql = queries_pi[selected_query]\n",
        "            df_result = pd.read_sql_query(sql, conn)\n",
        "            if not df_result.empty:\n",
        "                st.dataframe(df_result)\n",
        "            else:\n",
        "                st.info(\"No results found.\")\n",
        "\n",
        "    # --- Tab 2: nutrient_info ---\n",
        "    with tab2:\n",
        "        queries_ni = {\n",
        "            \"1.Top 10 products with highest energy-kcal_value\": \\\"\"\"\n",
        "             SELECT product_code, energy_kcal FROM nutrient_info ORDER BY energy_kcal DESC LIMIT 10\n",
        "             \\\"\"\",\n",
        "            \"2.Average sugars_value per nova-group\": \\\"\"\"\n",
        "             SELECT nova_group, AVG(sugars) AS avg_sugars FROM nutrient_info GROUP BY nova_group\n",
        "             \\\"\"\",\n",
        "            \"3.Count products with fat_value > 20g\": \\\"\"\"\n",
        "             SELECT COUNT(*) FROM nutrient_info WHERE fat > 20\n",
        "             \\\"\"\",\n",
        "            \"4.Average carbohydrates_value per product\": \\\"\"\"\n",
        "             SELECT product_code, carbohydrates FROM nutrient_info\n",
        "             \\\"\"\",\n",
        "            \"5.Products with sodium_value > 1g\": \\\"\"\"\n",
        "             SELECT product_code, sodium FROM nutrient_info WHERE sodium > 1\n",
        "             \\\"\"\",\n",
        "            \"6.Count products with non-zero fruits-vegetables-nuts content\": \\\"\"\"\n",
        "             SELECT COUNT(*) FROM nutrient_info WHERE fruits_veg_nuts_estimate > 0\n",
        "             \\\"\"\",\n",
        "            \"7.Products with energy-kcal_value > 500\": \\\"\"\"\n",
        "             SELECT * FROM nutrient_info WHERE energy_kcal > 500\n",
        "             \\\"\"\"\n",
        "        }\n",
        "\n",
        "        selected_query = st.selectbox(\"Select query:\", list(queries_ni.keys()))\n",
        "        if selected_query:\n",
        "            sql = queries_ni[selected_query]\n",
        "            df_result = pd.read_sql_query(sql, conn)\n",
        "            if not df_result.empty:\n",
        "                st.dataframe(df_result)\n",
        "            else:\n",
        "                st.info(\"No results found.\")\n",
        "\n",
        "    # --- Tab 3: derived_metrics ---\n",
        "    with tab3:\n",
        "        queries_dm = {\n",
        "            \"1.Count products per calorie_category\": \\\"\"\"\n",
        "             SELECT calorie_category, COUNT(*) AS count FROM derived_metrics GROUP BY calorie_category\n",
        "             \\\"\"\",\n",
        "            \"2.Count of High Sugar products\": \\\"\"\"\n",
        "             SELECT COUNT(*) FROM derived_metrics WHERE sugar_category='High Sugar'\n",
        "             \\\"\"\",\n",
        "            \"3.Average sugar_to_carb_ratio for High Calorie products\": \\\"\"\"\n",
        "             SELECT AVG(sugar_to_carb_ratio) FROM derived_metrics WHERE calorie_category='High'\n",
        "             \\\"\"\",\n",
        "            \"4.Products that are both High Calorie and High Sugar\": \\\"\"\"\n",
        "             SELECT * FROM derived_metrics WHERE calorie_category='High' AND sugar_category='High Sugar'\n",
        "             \\\"\"\",\n",
        "            \"5.Number of products marked as ultra-processed\": \\\"\"\"\n",
        "             SELECT COUNT(*) FROM derived_metrics WHERE is_ultra_processed='Yes'\n",
        "             \\\"\"\",\n",
        "            \"6.Products with sugar_to_carb_ratio > 0.7\": \\\"\"\"\n",
        "             SELECT * FROM derived_metrics WHERE sugar_to_carb_ratio > 0.7\n",
        "             \\\"\"\",\n",
        "            \"7.Average sugar_to_carb_ratio per calorie_category\": \\\"\"\"\n",
        "             SELECT calorie_category, AVG(sugar_to_carb_ratio) AS avg_ratio FROM derived_metrics GROUP BY calorie_category\n",
        "             \\\"\"\"\n",
        "        }\n",
        "\n",
        "        selected_query = st.selectbox(\"Select query:\", list(queries_dm.keys()))\n",
        "        if selected_query:\n",
        "            sql = queries_dm[selected_query]\n",
        "            df_result = pd.read_sql_query(sql, conn)\n",
        "            if not df_result.empty:\n",
        "                st.dataframe(df_result)\n",
        "            else:\n",
        "                st.info(\"No results found.\")\n",
        "\n",
        "\n",
        "    # --- Tab 4: Join Queries ---\n",
        "    with tab4:\n",
        "        queries_join = {\n",
        "            \"1.Top 5 brands with most High Calorie products\": \\\"\"\"\n",
        "                SELECT p.brand, COUNT(*) AS high_cal_count\n",
        "                FROM product_info p\n",
        "                JOIN derived_metrics d ON p.product_code=d.product_code\n",
        "                WHERE d.calorie_category='High'\n",
        "                GROUP BY p.brand ORDER BY high_cal_count DESC LIMIT 5\n",
        "            \\\"\"\",\n",
        "            \"2.Average energy-kcal_value for each calorie_category\": \\\"\"\"\n",
        "                SELECT d.calorie_category, AVG(n.energy_kcal) AS avg_energy\n",
        "                FROM derived_metrics d\n",
        "                JOIN nutrient_info n ON d.product_code=n.product_code\n",
        "                GROUP BY d.calorie_category\n",
        "            \\\"\"\",\n",
        "            \"3.Count of ultra-processed products per brand\": \\\"\"\"\n",
        "                SELECT p.brand, COUNT(*) AS ultra_count\n",
        "                FROM product_info p\n",
        "                JOIN derived_metrics d ON p.product_code=d.product_code\n",
        "                WHERE d.is_ultra_processed='Yes'\n",
        "                GROUP BY p.brand\n",
        "            \\\"\"\",\n",
        "            \"4.Products with High Sugar and High Calorie along with brand\": \\\"\"\"\n",
        "                SELECT p.brand, p.product_name, d.calorie_category, d.sugar_category\n",
        "                FROM product_info p\n",
        "                JOIN derived_metrics d ON p.product_code=d.product_code\n",
        "                WHERE d.calorie_category='High' AND d.sugar_category='High Sugar'\n",
        "            \\\"\"\",\n",
        "            \"5.Average sugar content per brand for ultra-processed products\": \\\"\"\"\n",
        "                SELECT p.brand, AVG(n.sugars) AS avg_sugars\n",
        "                FROM product_info p\n",
        "                JOIN derived_metrics d ON p.product_code=d.product_code\n",
        "                JOIN nutrient_info n ON p.product_code=n.product_code\n",
        "                WHERE d.is_ultra_processed='Yes'\n",
        "                GROUP BY p.brand\n",
        "            \\\"\"\",\n",
        "            \"6.Number of products with fruits/vegetables/nuts content in each calorie_category\": \\\"\"\"\n",
        "                SELECT d.calorie_category, COUNT(*) AS count_with_fv\n",
        "                FROM derived_metrics d\n",
        "                JOIN nutrient_info n ON d.product_code=n.product_code\n",
        "                WHERE n.fruits_veg_nuts_estimate > 0\n",
        "                GROUP BY d.calorie_category\n",
        "            \\\"\"\",\n",
        "            \"7.Top 5 products by sugar_to_carb_ratio with their calorie and sugar category\": \\\"\"\"\n",
        "                SELECT product_code, sugar_to_carb_ratio, calorie_category, sugar_category\n",
        "                FROM derived_metrics\n",
        "                ORDER BY sugar_to_carb_ratio DESC LIMIT 5\n",
        "            \\\"\"\"\n",
        "        }\n",
        "\n",
        "        selected_query = st.selectbox(\"Select query:\", list(queries_join.keys()))\n",
        "        if selected_query:\n",
        "            sql = queries_join[selected_query]\n",
        "            df_result = pd.read_sql_query(sql, conn)\n",
        "            if not df_result.empty:\n",
        "                st.dataframe(df_result)\n",
        "            else:\n",
        "                st.info(\"No results found.\")\n",
        "\n",
        "    conn.close()\n",
        "\n",
        "\"\"\"\n",
        "\n",
        "with open(\"app.py\", \"w\") as f:\n",
        "    f.write(app_code)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# --- Colab Streamlit + Cloudflared Setup ---\n",
        "\n",
        "# 1Ô∏è‚É£ Install dependencies\n",
        "!pip install streamlit pandas requests --quiet\n",
        "\n",
        "# 2Ô∏è‚É£ Download and install cloudflared\n",
        "!wget -q https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb\n",
        "!dpkg -i cloudflared-linux-amd64.deb\n",
        "\n",
        "# 3Ô∏è‚É£ Kill any old processes\n",
        "!pkill -f streamlit\n",
        "!pkill -f cloudflared\n",
        "\n",
        "# 4Ô∏è‚É£ Run Streamlit app in background and log output\n",
        "!nohup streamlit run app.py --server.port 8501 --server.headless true > log.txt 2>&1 &\n",
        "\n",
        "import time\n",
        "print(\"‚è≥ Waiting 10 seconds for Streamlit to start...\")\n",
        "time.sleep(10)\n",
        "\n",
        "# 5Ô∏è‚É£ Check if Streamlit is running\n",
        "!tail -n 20 log.txt\n",
        "\n",
        "# 6Ô∏è‚É£ Start Cloudflared tunnel (after Streamlit is up)\n",
        "!cloudflared tunnel --url http://localhost:8501 --no-autoupdate"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LXuyvu-pPQdP",
        "outputId": "ed70b268-68be-4697-ce9f-68018db0d2ba"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[2K   \u001b[90m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m \u001b[32m10.1/10.1 MB\u001b[0m \u001b[31m60.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m \u001b[32m6.9/6.9 MB\u001b[0m \u001b[31m109.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hSelecting previously unselected package cloudflared.\n",
            "(Reading database ... 126441 files and directories currently installed.)\n",
            "Preparing to unpack cloudflared-linux-amd64.deb ...\n",
            "Unpacking cloudflared (2025.9.1) ...\n",
            "Setting up cloudflared (2025.9.1) ...\n",
            "Processing triggers for man-db (2.10.2-1) ...\n",
            "‚è≥ Waiting 10 seconds for Streamlit to start...\n",
            "\n",
            "Collecting usage statistics. To deactivate, set browser.gatherUsageStats to false.\n",
            "\n",
            "\n",
            "  You can now view your Streamlit app in your browser.\n",
            "\n",
            "  Local URL: http://localhost:8501\n",
            "  Network URL: http://172.28.0.12:8501\n",
            "  External URL: http://34.75.211.146:8501\n",
            "\n",
            "\u001b[90m2025-09-28T12:13:57Z\u001b[0m \u001b[32mINF\u001b[0m Thank you for trying Cloudflare Tunnel. Doing so, without a Cloudflare account, is a quick way to experiment and try it out. However, be aware that these account-less Tunnels have no uptime guarantee, are subject to the Cloudflare Online Services Terms of Use (https://www.cloudflare.com/website-terms/), and Cloudflare reserves the right to investigate your use of Tunnels for violations of such terms. If you intend to use Tunnels in production you should use a pre-created named tunnel by following: https://developers.cloudflare.com/cloudflare-one/connections/connect-apps\n",
            "\u001b[90m2025-09-28T12:13:57Z\u001b[0m \u001b[32mINF\u001b[0m Requesting new quick Tunnel on trycloudflare.com...\n",
            "\u001b[90m2025-09-28T12:14:01Z\u001b[0m \u001b[32mINF\u001b[0m +--------------------------------------------------------------------------------------------+\n",
            "\u001b[90m2025-09-28T12:14:01Z\u001b[0m \u001b[32mINF\u001b[0m |  Your quick Tunnel has been created! Visit it at (it may take some time to be reachable):  |\n",
            "\u001b[90m2025-09-28T12:14:01Z\u001b[0m \u001b[32mINF\u001b[0m |  https://liked-xbox-buyers-developments.trycloudflare.com                                  |\n",
            "\u001b[90m2025-09-28T12:14:01Z\u001b[0m \u001b[32mINF\u001b[0m +--------------------------------------------------------------------------------------------+\n",
            "\u001b[90m2025-09-28T12:14:01Z\u001b[0m \u001b[32mINF\u001b[0m Cannot determine default configuration path. No file [config.yml config.yaml] in [~/.cloudflared ~/.cloudflare-warp ~/cloudflare-warp /etc/cloudflared /usr/local/etc/cloudflared]\n",
            "\u001b[90m2025-09-28T12:14:01Z\u001b[0m \u001b[32mINF\u001b[0m Version 2025.9.1 (Checksum 3dc1dc4252eae3c691861f926e2b8640063a2ce534b07b7a3f4ec2de439ecfe3)\n",
            "\u001b[90m2025-09-28T12:14:01Z\u001b[0m \u001b[32mINF\u001b[0m GOOS: linux, GOVersion: go1.24.4, GoArch: amd64\n",
            "\u001b[90m2025-09-28T12:14:01Z\u001b[0m \u001b[32mINF\u001b[0m Settings: map[ha-connections:1 no-autoupdate:true protocol:quic url:http://localhost:8501]\n",
            "\u001b[90m2025-09-28T12:14:01Z\u001b[0m \u001b[32mINF\u001b[0m cloudflared will not automatically update if installed by a package manager.\n",
            "\u001b[90m2025-09-28T12:14:01Z\u001b[0m \u001b[32mINF\u001b[0m Generated Connector ID: 4771bf62-6838-4200-89d6-a1ea7b2a356a\n",
            "\u001b[90m2025-09-28T12:14:01Z\u001b[0m \u001b[32mINF\u001b[0m Initial protocol quic\n",
            "\u001b[90m2025-09-28T12:14:01Z\u001b[0m \u001b[32mINF\u001b[0m ICMP proxy will use 172.28.0.12 as source for IPv4\n",
            "\u001b[90m2025-09-28T12:14:01Z\u001b[0m \u001b[32mINF\u001b[0m ICMP proxy will use :: as source for IPv6\n",
            "\u001b[90m2025-09-28T12:14:01Z\u001b[0m \u001b[1m\u001b[31mERR\u001b[0m\u001b[0m Cannot determine default origin certificate path. No file cert.pem in [~/.cloudflared ~/.cloudflare-warp ~/cloudflare-warp /etc/cloudflared /usr/local/etc/cloudflared]. You need to specify the origin certificate path by specifying the origincert option in the configuration file, or set TUNNEL_ORIGIN_CERT environment variable \u001b[36moriginCertPath=\u001b[0m\n",
            "\u001b[90m2025-09-28T12:14:01Z\u001b[0m \u001b[32mINF\u001b[0m ICMP proxy will use 172.28.0.12 as source for IPv4\n",
            "\u001b[90m2025-09-28T12:14:01Z\u001b[0m \u001b[32mINF\u001b[0m ICMP proxy will use :: as source for IPv6\n",
            "\u001b[90m2025-09-28T12:14:01Z\u001b[0m \u001b[32mINF\u001b[0m Starting metrics server on 127.0.0.1:20241/metrics\n",
            "\u001b[90m2025-09-28T12:14:01Z\u001b[0m \u001b[32mINF\u001b[0m Tunnel connection curve preferences: [X25519MLKEM768 CurveP256] \u001b[36mconnIndex=\u001b[0m0 \u001b[36mevent=\u001b[0m0 \u001b[36mip=\u001b[0m198.41.192.7\n",
            "2025/09/28 12:14:01 failed to sufficiently increase receive buffer size (was: 208 kiB, wanted: 7168 kiB, got: 416 kiB). See https://github.com/quic-go/quic-go/wiki/UDP-Buffer-Sizes for details.\n",
            "\u001b[90m2025-09-28T12:14:01Z\u001b[0m \u001b[32mINF\u001b[0m Registered tunnel connection \u001b[36mconnIndex=\u001b[0m0 \u001b[36mconnection=\u001b[0m0ea9e569-556d-413a-8d6a-b102398f351f \u001b[36mevent=\u001b[0m0 \u001b[36mip=\u001b[0m198.41.192.7 \u001b[36mlocation=\u001b[0matl01 \u001b[36mprotocol=\u001b[0mquic\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "DoP1F3KDPhPN"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}